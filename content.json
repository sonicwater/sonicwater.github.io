{"meta":{"title":"Sonic's Blog","subtitle":null,"description":"A castaway Engineer of front-end.","author":"Sonic","url":"https://github.com/sonicwater"},"pages":[{"title":"about","date":"2017-03-11T12:59:20.000Z","updated":"2018-01-03T05:38:58.421Z","comments":true,"path":"about/index.html","permalink":"https://github.com/sonicwater/about/index.html","excerpt":"","text":"about SonicA castaway Engineer of front-end.QQ：110017838Email: 110017838@qq.comgithub:https://github.com/sonicwater"},{"title":"tags","date":"2018-01-03T05:21:49.000Z","updated":"2018-01-03T05:22:41.329Z","comments":true,"path":"tags/index.html","permalink":"https://github.com/sonicwater/tags/index.html","excerpt":"","text":""},{"title":"categories","date":"2015-12-07T11:11:13.000Z","updated":"2018-01-03T05:55:36.105Z","comments":true,"path":"categories/index.html","permalink":"https://github.com/sonicwater/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"vue + vuex + element-ui 购物车","slug":"vue + vuex + element-ui 购物车","date":"2018-07-17T16:00:00.000Z","updated":"2018-07-18T14:45:58.658Z","comments":true,"path":"2018/07/18/vue + vuex + element-ui 购物车/","link":"","permalink":"https://github.com/sonicwater/2018/07/18/vue + vuex + element-ui 购物车/","excerpt":"","text":"这个购物车功能相对简单，路由控制进入home页（商品列表页），添加商品后，cart页（购物车页）链接后会显示加入商品数量。进入cart页会列出添加的商品，可加减数量、删除单个商品、清空购物车。 项目目录 router.js 路由引入../page/目录下页面123456789101112131415import App from '../App'import Home from '../page/home'import Cart from '../page/cart'export default [&#123; path: '/', component: App, children: [&#123; path: '/', component: Home &#125;, &#123; path: '/cart', component: Cart &#125;]&#125;] layout.vue12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152&lt;template&gt; &lt;div&gt; &lt;el-container&gt; &lt;el-aside width=\"200px\"&gt; &lt;el-menu router :default-active=\"$route.path\" class=\"el-menu-vertical-demo nav\"&gt; &lt;el-menu-item index=\"/\"&gt; &lt;i class=\"el-icon-menu\"&gt;&lt;/i&gt; &lt;span slot=\"title\"&gt;home&lt;/span&gt; &lt;/el-menu-item&gt; &lt;el-menu-item index=\"/cart\"&gt; &lt;i class=\"el-icon-goods\"&gt;&lt;/i&gt; &lt;span slot=\"title\"&gt; cart &lt;el-badge class=\"mark\" v-if=\"totalNum\" :value=\"totalNum\" /&gt; &lt;/span&gt; &lt;/el-menu-item&gt; &lt;/el-menu&gt; &lt;/el-aside&gt; &lt;el-main&gt; &lt;el-tag v-if=\"page == 'home'\"&gt;商品列表&lt;/el-tag&gt; &lt;el-tag v-if=\"page == 'cart'\"&gt;购物车&lt;/el-tag&gt; &lt;Goods v-if=\"page == 'home'\"&gt;&lt;/Goods&gt; &lt;Cart v-if=\"page == 'cart'\"&gt;&lt;/Cart&gt; &lt;/el-main&gt; &lt;/el-container&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt; import &#123; mapState, mapGetters, mapActions &#125; from 'vuex' import Goods from './goods' import Cart from './cart' export default &#123; name: 'layout', props:['page'], components: &#123; Goods, Cart &#125;, computed:&#123; ...mapGetters([ 'goodList','totalNum' ]) &#125;, methods: &#123; ...mapActions(['addToCart']) &#125; &#125;&lt;/script&gt;&lt;style scoped&gt;&lt;/style&gt; 通过 &lt;el-menu&gt; 组件的 router 和 :default-active=”$route.path” 属性加上路由功能 通过 &lt;el-menu-item&gt; 组件的 index 映射 url 地址 &lt;el-main&gt; 组件部分通过 layout 父组件的 page 参数值进行 v-if 条件渲染 goods.vue123456789101112131415161718192021222324252627282930&lt;template&gt; &lt;el-table :data=\"goodList\" style=\"width: 100%\"&gt; &lt;el-table-column prop=\"id\" label=\"商品ID\" width=\"180\"&gt;&lt;/el-table-column&gt; &lt;el-table-column prop=\"name\" label=\"商品名称\" width=\"180\"&gt;&lt;/el-table-column&gt; &lt;el-table-column prop=\"price\" label=\"单价\" width=\"180\"&gt;&lt;/el-table-column&gt; &lt;el-table-column label=\"操作\"&gt; &lt;template slot-scope=\"scope\"&gt; &lt;el-button size=\"mini\" type=\"primary\" icon=\"el-icon-plus\" @click=\"addToCart( scope.row )\"&gt;加入购物车&lt;/el-button&gt; &lt;/template&gt; &lt;/el-table-column&gt; &lt;/el-table&gt;&lt;/template&gt;&lt;script&gt; import &#123; mapState, mapGetters, mapActions &#125; from 'vuex' export default &#123; name: 'goods' computed:&#123; ...mapGetters([ 'goodList','totalNum' ]) &#125;, methods: &#123; ...mapActions(['addToCart']) &#125; &#125;&lt;/script&gt;&lt;style scoped&gt;&lt;/style&gt; 商品列表页面，加入购物车按钮的事件 addToCart 绑定的是 action.js 中 注册的 ADD_TO_CART 事件，这里传的参数 (scope.row) 是对应这一行的数据，包括这一条商品id，商品名称，单价 这里的 &lt;el-badge class=&quot;mark&quot; v-if=&quot;totalNum&quot; :value=&quot;totalNum&quot; /&gt; 绑定的是点击加入购物车按钮后的购物车商品数量总数 cart.vue123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778&lt;template&gt; &lt;div&gt; &lt;el-table :data=\"cartProducts\" style=\"width: 100%\"&gt; &lt;el-table-column prop=\"id\" label=\"商品ID\" width=\"180\"&gt;&lt;/el-table-column&gt; &lt;el-table-column prop=\"name\" label=\"商品名称\" width=\"180\"&gt;&lt;/el-table-column&gt; &lt;el-table-column label=\"数量\" width=\"180\"&gt; &lt;template slot-scope=\"scope\"&gt; &lt;el-input-number size=\"mini\" :min=\"1\" :value=\"scope.row.num\" v-on:input=\"handleBlur\" @change=\"handleChange( scope.row )\"&gt;&lt;/el-input-number&gt; &lt;/template&gt; &lt;/el-table-column&gt; &lt;el-table-column prop=\"price\" label=\"单价\" width=\"180\"&gt;&lt;/el-table-column&gt; &lt;el-table-column prop=\"total_num\" label=\"总价\" width=\"180\"&gt;&lt;/el-table-column&gt; &lt;el-table-column label=\"操作\" width=\"180\"&gt; &lt;template slot-scope=\"scope\"&gt; &lt;el-button type=\"danger\" plain icon=\"el-icon-delete\" size=\"mini\" @click=\"dialogVisibleTrue( scope.row )\"&gt;删除&lt;/el-button&gt; &lt;/template&gt; &lt;/el-table-column&gt; &lt;/el-table&gt; &lt;Info v-if=\"totalNum\"&gt;&lt;/Info&gt; &lt;el-dialog title=\"注意\" :visible.sync=\"dialogVisible\" width=\"20%\"&gt; &lt;span&gt;确定要删除这个商品吗?&lt;/span&gt; &lt;span slot=\"footer\" class=\"dialog-footer\"&gt; &lt;el-button @click=\"dialogVisible = false\"&gt;取 消&lt;/el-button&gt; &lt;el-button type=\"primary\" @click=\"dialogSure\"&gt;确 定&lt;/el-button&gt; &lt;/span&gt; &lt;/el-dialog&gt; &lt;/div&gt; &lt;/template&gt;&lt;script&gt; import &#123; mapState, mapGetters, mapActions &#125; from 'vuex' import Info from './info' export default &#123; name: 'cart', data() &#123; return &#123; dialogVisible : false, result : null, input_number_value:1 &#125; &#125;, computed:&#123; ...mapGetters([ 'cartProducts','totalNum' ]) &#125;, components: &#123; Info &#125;, methods: &#123; ...mapActions(['delProduct','numChange']), dialogVisibleTrue( data )&#123; this.dialogVisible = true; this.result = data; &#125;, dialogSure()&#123; this.delProduct( this.result ); this.dialogVisible = false; &#125;, handleBlur(value)&#123; this.input_number_value = value &#125;, handleChange( data ) &#123; data.value = this.input_number_value; this.numChange( data ); &#125; &#125; &#125;&lt;/script&gt;&lt;style scoped&gt; .el-table th&gt;.cell&#123;text-align: center;&#125; .el-table td&gt;.cell&#123;text-align: center;&#125;&lt;/style&gt; &lt;el-input-number&gt;是控制单个商品数量加减的组件， :value=”scope.row.num” 属性绑定value值，v-on:input=”handleBlur” 属性通过handleBlur方法将数量单独存储在 data 的 input_number_value 值中，@change=”handleChange( scope.row )” 将change事件绑定handleChange方法，而 handleChange 方法里调用 action.js 中注册的 numChange 事件，给 numChange 传的参数中，data.value 是 data 中临时存放的 input_number_value 的值。 删除按钮是删除对应的一条数据，实现上，类似加入购物车的功能，这里加了一个弹出层&lt;el-dialog&gt;，询问是否要删除 这个页面引入一个组件 info.vue 用来显示购物车商品总数量、总价和清空购物车按钮info.vue 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051&lt;template&gt; &lt;div&gt; &lt;el-row :gutter=\"20\"&gt; &lt;el-col :span=\"6\"&gt;总数：&#123;&#123;totalNum&#125;&#125;&lt;/el-col&gt; &lt;el-col :span=\"6\"&gt;合计价格：&#123;&#123;totalPrice&#125;&#125;&lt;/el-col&gt; &lt;el-col :span=\"6\"&gt; &lt;el-button type=\"danger\" size=\"medium\" icon=\"el-icon-delete\" @click=\"dialogDeleteAll\"&gt;清空购物车&lt;/el-button&gt; &lt;/el-col&gt; &lt;el-col :span=\"6\"&gt;&lt;/el-col&gt; &lt;/el-row&gt; &lt;el-dialog title=\"注意\" :visible.sync=\"dialogVisible\" width=\"20%\"&gt; &lt;span&gt;要清空购物车吗?&lt;/span&gt; &lt;span slot=\"footer\" class=\"dialog-footer\"&gt; &lt;el-button @click=\"dialogVisible = false\"&gt;取 消&lt;/el-button&gt; &lt;el-button type=\"primary\" @click=\"dialogSure\"&gt;确 定&lt;/el-button&gt; &lt;/span&gt; &lt;/el-dialog&gt; &lt;/div&gt; &lt;/template&gt;&lt;script&gt; import &#123; mapState, mapGetters, mapActions &#125; from 'vuex' export default &#123; name: 'info', data() &#123; return &#123; dialogVisible : false &#125; &#125;, computed:&#123; ...mapGetters(['totalPrice','totalNum']) &#125;, methods: &#123; ...mapActions(['clearAllCart']), dialogDeleteAll( data )&#123; this.dialogVisible = true; &#125;, dialogSure()&#123; this.clearAllCart(); this.dialogVisible = false; &#125; &#125; &#125;&lt;/script&gt;&lt;style scoped&gt; .el-col-6&#123;padding: 20px; text-align: center;&#125;&lt;/style&gt; 清空购物车按钮就是清空 vuex 中 added 数组 项目地址: https://github.com/sonicwater/vue-element-ul-cart","categories":[{"name":"vue","slug":"vue","permalink":"https://github.com/sonicwater/categories/vue/"}],"tags":[{"name":"vue","slug":"vue","permalink":"https://github.com/sonicwater/tags/vue/"},{"name":"vuex","slug":"vuex","permalink":"https://github.com/sonicwater/tags/vuex/"},{"name":"element-ui","slug":"element-ui","permalink":"https://github.com/sonicwater/tags/element-ui/"},{"name":"购物车","slug":"购物车","permalink":"https://github.com/sonicwater/tags/购物车/"}]},{"title":"(一) JavaScript 数据类型，传值和传址","slug":"(一) JavaScript 数据类型，传值和传址","date":"2015-01-14T16:00:00.000Z","updated":"2018-01-07T13:29:27.611Z","comments":true,"path":"2015/01/15/(一) JavaScript 数据类型，传值和传址/","link":"","permalink":"https://github.com/sonicwater/2015/01/15/(一) JavaScript 数据类型，传值和传址/","excerpt":"","text":"JavaScript 数据类型分基本数据类型（或称”原始类型”）， 和引用数据类型（或称”对象类型”）。(1) 基本数据类型（原始类型）包括: Number, String, Boolean, null, undefined 12345678910111213var a = 1; //定义一个数字 Number 类型var b = \"1\"; //定义一个字符串 String 类型var c = true; //定义一个布尔 Boolean 类型var d = null; //定义一个 null 类型var e = undefined; //定义一个 undefined 类型，基本没有人特意这么做var f; //定义一个变量，没有赋值，其值就是 undefinedconsole.log(Object.prototype.toString.call(a)); //[object Number]console.log(Object.prototype.toString.call(b)); //[object String]console.log(Object.prototype.toString.call(c)); //[object Boolean]console.log(Object.prototype.toString.call(d)); //[object Null]console.log(Object.prototype.toString.call(e)); //[object Undefined]console.log(Object.prototype.toString.call(f)); //[object Undefined] Object.prototype.toString.call()是检测数据类型的一种方式 基本数据类型的特点: 保存在变量中的值是按值访问，也就是传值 基本数据类型的值保存在栈内存里，占据固定大小的空间 不能直接给他们添加属性和方法 1234567891011121314var b = 1;var a = b;a = 2;console.log(a); //2console.log(b); //1a.c = 3; //不能像这样给a添加属性a.d = function(num)&#123; //也不能这样给a添加方法 return num;&#125;console.log(a.c); //undefinedconsole.log(a.d(5)); //报错 Uncaught TypeError: a.d is not a function 为什么说”不能直接给他们添加属性和方法”?可以像这样给它们添加属性和方法： 1234567891011121314var b = 1;var a = b;a = 2;console.log(a); //2console.log(b); //1Number.prototype.c = 3;Number.prototype.d = function(num)&#123; return num;&#125;console.log(a.c); //3console.log(a.d(5)); //5 Number.prototype涉及到原型和继承，后面会说到。 (2) 引用数据类型（对象类型）也就是对象 Object 1234567891011121314151617181920var b = 1;var a = b;a = 2;console.log( a === b ); //falsevar objA = &#123; //定义对象objA a:2, b:1&#125;var objB = objA; //将objA赋值给变量objBvar objC = &#123; //定义对象objC a:2, b:1&#125;console.log( objA === objB ); //trueconsole.log( objA === objC ); //false 可以看到，引用类型是按址传递，上述代码中，即使objA和objC拥有相同的属性，这两个对象也不是指向同一个内存地址。 “===“是判断两边是否指向同一个内存地址。“==“是判断两边的值是否相等，包括隐式转换。 引用数据类型的特点: 引用可以理解为C语言中的指针，操作对象其实就是在操作这个指针，并没有在操作实际的内存空间。 引用数据类型的值保存在堆内存里 可以添加、修改和删除对象的属性和方法 123456789101112var obj = new Object(); //创建一个对象 objobj.name = \"sonic\"; //增加一个属性nameobj.sayName = function()&#123; //增加一个方法 sayName console.log(this.name);&#125;obj.sayName(); //通关对象 obj 调用 sayName 方法输出 \"sonic\"sayNameobj.name = \"jack\"; //修改 name 属性的值obj.sayName(); // jackdelete obj.name; //用 delete 操作符删除obj的 name 属性obj.sayName(); // undefined","categories":[{"name":"JavaScript基础","slug":"JavaScript基础","permalink":"https://github.com/sonicwater/categories/JavaScript基础/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://github.com/sonicwater/tags/JavaScript/"}]}]}