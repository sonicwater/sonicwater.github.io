{"meta":{"title":"Sonic's Blog","subtitle":null,"description":"A castaway Engineer of front-end.","author":"Sonic","url":"https://github.com/sonicwater"},"pages":[{"title":"about","date":"2017-03-11T12:59:20.000Z","updated":"2018-01-03T05:38:58.421Z","comments":true,"path":"about/index.html","permalink":"https://github.com/sonicwater/about/index.html","excerpt":"","text":"about SonicA castaway Engineer of front-end.QQ：110017838Email: 110017838@qq.comgithub:https://github.com/sonicwater"},{"title":"categories","date":"2015-12-07T11:11:13.000Z","updated":"2018-01-03T05:55:36.105Z","comments":true,"path":"categories/index.html","permalink":"https://github.com/sonicwater/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2018-01-03T05:21:49.000Z","updated":"2018-01-03T05:22:41.329Z","comments":true,"path":"tags/index.html","permalink":"https://github.com/sonicwater/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"(一) JavaScript 数据类型，传值和传址","slug":"(一) JavaScript 数据类型，传值和传址","date":"2016-04-28T16:00:00.000Z","updated":"2018-01-06T16:29:29.220Z","comments":true,"path":"2016/04/29/(一) JavaScript 数据类型，传值和传址/","link":"","permalink":"https://github.com/sonicwater/2016/04/29/(一) JavaScript 数据类型，传值和传址/","excerpt":"","text":"JavaScript 数据类型分基本数据类型， 和引用数据类型。(1) 基本数据类型包括: Number, String, Boolean, null, undefined code :12345678910111213var a = 1;var b = \"1\";var c = true;var d = null;var e = undefined; // ← 基本没有人这么赋值var f;console.log(Object.prototype.toString.call(a)); //[object Number]console.log(Object.prototype.toString.call(b)); //[object String]console.log(Object.prototype.toString.call(c)); //[object Boolean]console.log(Object.prototype.toString.call(d)); //[object Null]console.log(Object.prototype.toString.call(e)); //[object Undefined]console.log(Object.prototype.toString.call(f)); //[object Undefined] Object.prototype.toString.call()是检测数据类型的一种方式 基本数据类型的特点: 保存在变量中的值是按值访问，也就是传值 基本数据类型的值保存在栈内存里，占据固定大小的空间 不能直接给他们添加属性和方法 code :1234567891011121314var b = 1;var a = b;a = 2;console.log(a); //2console.log(b); //1a.c = 3; //不能像这样给a添加属性a.d = function(num)&#123; //也不能这样给a添加方法 return num;&#125;console.log(a.c); //undefinedconsole.log(a.d(5)); //报错 Uncaught TypeError: a.d is not a function 为什么说”不能直接给他们添加属性和方法”?可以像这样给它们添加属性和方法： code :1234567891011121314var b = 1;var a = b;a = 2;console.log(a); //2console.log(b); //1Number.prototype.c = 3;Number.prototype.d = function(num)&#123; return num;&#125;console.log(a.c); //3console.log(a.d(5)); //5 Number.prototype涉及到原型和继承，后面会说到。 (2) 引用数据类型也就是对象 Object code :1234567891011121314151617181920var b = 1;var a = b;a = 2;console.log( a === b ); //falsevar objA = &#123; //定义对象objA a:2, b:1&#125;var objB = objA; //将objA赋值给变量objBvar objC = &#123; //定义对象objC a:2, b:1&#125;console.log( objA === objB ); //trueconsole.log( objA === objC ); //false 可以看到，引用类型是按址传递，上述代码中，即使objA和objC拥有相同的属性，这两个对象也不是指向同一个内存地址。 “===“是判断两边是否指向同一个内存地址。 “==“是判断两边的值是否相等。 引用数据类型的特点: 引用可以理解为C语言中的指针，操作对象其实就是在操作这个指针，并没有在操作实际的内存空间。 引用数据类型的值保存在堆内存里 可以添加、修改和删除对象的属性和方法 code :123456789101112var obj = new Object(); //创建一个对象 objobj.name = \"sonic\"; //增加一个属性nameobj.sayName = function()&#123; //增加一个方法 sayName console.log(this.name);&#125;obj.sayName(); //通关对象 obj 调用 sayName 方法输出 \"sonic\"sayNameobj.name = \"jack\"; //修改 name 属性的值obj.sayName(); // jackdelete obj.name; //用 delete 操作符删除obj的 name 属性obj.sayName(); // undefined","categories":[{"name":"JavaScript基础","slug":"JavaScript基础","permalink":"https://github.com/sonicwater/categories/JavaScript基础/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://github.com/sonicwater/tags/JavaScript/"}]}]}